import numpy as np

def expand_maze(grid, S_i):
    m = len(grid)
    n = len(grid)
    neighbors = []
    #Right movement
    if S_i[1] + 1 < n and grid[S_i[0]][S_i[1] + 1] != 0:
        neighbors += [(S_i[0], S_i[1] + 1)]
    #Left movement
    if S_i[1] - 1 > -1 and grid[S_i[0]][S_i[1] - 1] != 0:
        neighbors += [(S_i[0], S_i[1] - 1)]
    #Up movement
    if S_i[0] + 1 < m and grid[S_i[0] + 1][S_i[1]] != 0:
        neighbors += [(S_i[0] + 1, S_i[1])]
    #Down movement
    if S_i[0] - 1 > - 1 and grid[S_i[0] - 1][S_i[1]] != 0:
        neighbors += [(S_i[0] - 1, S_i[1])]
    return neighbors

def expand_level(level, S_i):
    pass

def recover_solution(parent, start, path):
    if path[0] == start:
        return path
    else:
        path = [parent[path[0]]] + path
        return recover_solution(parent, start, path)

def BFS(problem, S, E, expand_func):
    parent = {}
    closed = set()
    open = []
    open += [S]
    while open:
        n = open.pop()
        closed.add(n)
        if n == E:
            return recover_solution(parent, S, [E])
        for h in expand_func(problem, n):
            if h not in closed:
                parent[h] = n
                open = [h] + open
    return []


#Tests
# grid = [[1,0,0,1,1,1],
#         [1,0,0,1,1,0],
#         [1,1,1,1,0,1],
#         [0,1,0,1,0,1],
#         [0,1,0,0,1,1],
#         [1,1,1,1,1,1]]
# print(BFS(grid, (5,0), (0,5), expand_maze))
# grid = [[0,1,1,1,1,1,0,0,1,1],
#         [1,1,0,1,1,1,1,1,1,1],
#         [0,1,0,1,1,0,0,1,0,0],
#         [1,1,1,0,0,0,1,1,0,1],
#         [1,0,0,1,1,1,1,1,1,1],
#         [1,0,0,1,1,0,1,0,0,1],
#         [1,1,1,1,0,1,1,1,1,1],
#         [0,1,0,1,0,1,1,1,1,1],
#         [0,1,0,0,1,1,1,0,0,0],
#         [1,1,1,1,1,1,1,0,0,1]]
# print(BFS(grid, (9,0), (0,9), expand_maze))



lvl = [
    [
        [2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2],
        [2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2],
        [1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1],
        [2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2],
        [2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2],
        [2,
        5,
        5,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2],
        [6,
        7,
        7,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2],
        [8,
        9,
        9,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2],
        [8,
        8,
        9,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        1,
        2,
        2,
        2],
        [8,
        9,
        9,
        1,
        1,
        2,
        2,
        5,
        5,
        2,
        2,
        2,
        5,
        5],
        [8,
        8,
        9,
        2,
        2,
        2,
        6,
        6,
        7,
        2,
        2,
        6,
        6,
        7],
        [8,
        8,
        2,
        2,
        2,
        2,
        8,
        8,
        9,
        2,
        2,
        8,
        8,
        9],
        [
        2,
        9,
        2,
        2,
        2,
        2,
        8,
        8,
        9,
        2,
        2,
        8,
        8,
        9
        ],
        [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
        ]
        ],
        [
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        1,
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        5,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        6,
        7,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        6,
        5,
        2,
        2,
        6,
        9,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        6,
        7,
        2,
        2,
        8,
        9,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        8,
        9,
        2,
        2,
        8,
        9,
        2
        ],
        [
        5,
        2,
        2,
        2,
        2,
        2,
        2,
        8,
        9,
        2,
        2,
        8,
        9,
        2
        ],
        [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
        ]
        ],
        [
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        5,
        2,
        2,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        6,
        7,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        8,
        9,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        8,
        9,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        8,
        9,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
        ]
        ],
        [
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        5,
        2,
        2,
        5,
        2
        ],
        [
        2,
        2,
        5,
        2,
        2,
        5,
        2,
        2,
        6,
        7,
        2,
        6,
        7,
        2
        ],
        [
        2,
        6,
        7,
        2,
        2,
        2,
        2,
        2,
        8,
        9,
        2,
        8,
        9,
        2
        ],
        [
        6,
        7,
        9,
        2,
        2,
        2,
        2,
        2,
        2,
        9,
        2,
        8,
        9,
        2
        ],
        [
        8,
        9,
        2,
        2,
        2,
        2,
        2,
        2,
        8,
        9,
        2,
        8,
        9,
        2
        ],
        [
        8,
        9,
        9,
        2,
        2,
        2,
        2,
        2,
        8,
        9,
        2,
        2,
        2,
        2
        ],
        [
        0,
        0,
        2,
        2,
        0,
        0,
        2,
        2,
        0,
        0,
        0,
        0,
        0,
        0
        ]
        ],
        [
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
        ],
        [
        2,
        1,
        2,
        1,
        1,
        2,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        1,
        1,
        5,
        1,
        1,
        1,
        5,
        2,
        5,
        4,
        4,
        4,
        2,
        2
        ],
        [
        6,
        6,
        7,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        8,
        8,
        9,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2
        ],
        [
        8,
        8,
        9,
        5,
        2,
        5,
        5,
        2,
        2,
        2,
        1,
        2,
        2,
        2
        ],
        [
        8,
        8,
        9,
        1,
        1,
        1,
        1,
        5,
        5,
        2,
        2,
        2,
        5,
        5
        ],
        [
        2,
        8,
        9,
        2,
        2,
        2,
        6,
        6,
        7,
        2,
        2,
        6,
        6,
        7
        ],
        [
        2,
        8,
        9,
        2,
        2,
        2,
        2,
        8,
        9,
        2,
        2,
        8,
        8,
        9
        ],
        [
        2,
        8,
        9,
        2,
        1,
        1,
        8,
        8,
        9,
        2,
        2,
        8,
        8,
        9
        ],
        [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0]
    ]
]

start_area = np.array([[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[0]])
for i in range(13):
    start_area = np.concatenate((start_area,  np.array([[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[0]])), axis = 1)
end_area = np.array([[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[0]])
for i in range(3):
    end_area = np.concatenate((end_area,  np.array([[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[0]])), axis = 1)
level_matrix = np.array(lvl[0])
for i in range(1, len(lvl)):
    level_matrix = np.concatenate((level_matrix, np.array(lvl[i])), axis = 1)

level_matrix = np.concatenate((start_area, level_matrix, end_area), axis = 1)
print(level_matrix)
print(level_matrix.shape)

start = (13, 0)
end = (13, 87)

# def get_visible_submatrix_window(matrix, reference_point, ):

